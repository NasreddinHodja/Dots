z ..
la
mgdl -u
cargo run -- --log quiet
cargo run -- -l plain
cargo run -- -d
cargo run -- -u
cargo build --release
mgdl -u
la
cargo run
./shutdown-menu 
power-menu 
power-menu
rofi -show run -p "Run "
systemctl stop kanata
z /home/nasreddin/Dots/.config/kanata 
kanata -c kanata.kbd 
systemctl start kanata
systemctl restart kanata
exit
mgdl -u
ka zen
exit
la
codium .
exit
exirt
exit
la
systemctl restart kanata
z ..
la Manga/
z manga
z ..
z -
z ~
z manga
la
rm -rf abara/ alive/ no_longer_human/
la
exit
la /media
la /run/media/ 
lsblk
simple-mtpfs
adb devices
adb -h
adb --help
adb devices
adb devices -l
adb kill-server
yay -Syu simple-mtpfs
simple-mtpfs -l
z
z ~
mkdir Android
rm Android/ 
rm -rf Android/ 
la .android/ 
mkdir android/ 
simple-mtpfs devices
simple-mtpfs -l
simple-mtpfs --device 1 android/ 
la android/Pictures/
la Manga/ 
la android/Pictures/Manga/eden_it_s_an_endless_world/ 
ls android/Pictures/Manga/eden_it_s_an_endless_world/
yay -Rsn simple-mtpfs
exit
z .config/
mkdir nasmacs; cd $_
touch init.el
emacs -q -l init.el 
emacs -Q
sh -c "emacs -q -l init.el"
exit
sh -c "emacs -q -l init.el"
mgdl -u
exit
bluetoothctl
exit
mgdl -uy
mgdl -u
kanata
xfce4-settings-manager 
bluetoothctl
exit
z prog/
z ..
z kbldraw
l
la
virtualenv .venv
source .venv/bin/activate
. .venv/bin/activate
chmod +x main.py 
./main.py 
exit
npm init
npm install -D typescript ts-node @types/node
git init
git add .
git status
exit
la /boot
grub-install -v
grub-install --version
lsblk -f
[ -d /sys/firmware/efi ] && echo "UEFI boot" || echo "BIOS boot"
sh -c '[ -d /sys/firmware/efi ] && echo "UEFI boot" || echo "BIOS boot"'
yay -Syu inkscape
eixt
exit
z ..
la
./watch.sh 
exite
exit
echo ac abc abbc abbbc | grep --color -E 'ab?c'
(defun ek/babel-ansi ()  (when-let ((beg (org-babel-where-is-src-block-result nil nil)))    (save-excursion      (goto-char beg)      (when (looking-at org-babel-result-regexp)        (let ((end (org-babel-result-end))              (ansi-color-context-region nil))          (ansi-color-apply-on-region beg end))))))(add-hook 'org-babel-after-execute-hook 'ek/babel-ansi)
remove-hook 'org-babel-execute-hook 'ek/babel-ansi
(remove-hook 'org-babel-execute-hook 'ek/babel-ansi)
(require 'ansi-color)(defun my/ansi-colorize-buffer ()  (let ((buffer-read-only nil))    (ansi-color-apply-on-region (point-min) (point-max))))(add-hook 'org-babel-after-execute-hook 'my/ansi-colorize-buffer)
(remove-hook 'org-babel-execute-hook 'ek/babel-ansi))
(remove-hook 'org-babel-execute-hook 'ek/babel-ansi)
(require 'ansi-color)(defun my/ansi-colorize-buffer ()  (let ((buffer-read-only nil))    (ansi-color-apply-on-region (point-min) (point-max))))(add-hook 'org-babel-after-execute-hook 'my/ansi-colorize-buffer)
cp ~/Pictures/scrot/pic-full-250814-2330-19.png 
