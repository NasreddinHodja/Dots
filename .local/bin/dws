#!/usr/bin/env sh

# Directional window switcher (for X) with cursor movement
# Usage: ./dws [up|down|left|right]

abs_diff() {
    local diff=$(($1 - $2))
    echo $((diff < 0 ? -diff : diff))
}

if [ $# -ne 1 ]; then
    echo "Usage: $0 [up|down|left|right]"
    exit 1
fi

direction="$1"
case "$direction" in
    up|down|left|right) ;;
    *) echo "Invalid direction. Use: up, down, left, right"; exit 1 ;;
esac

active_info=$(xprop -root _NET_ACTIVE_WINDOW | cut -d' ' -f5 | tr -d ',')
active_id=$(printf "0x%08x" $((active_info)))

current_window=$(wmctrl -lG | awk -v active="$active_id" '$1 == active {print $1, $3, $4, $5, $6; exit}')
if [ -z "$current_window" ]; then
    exit 1
fi

set -- $current_window
current_x=$2 current_y=$3 current_w=$4 current_h=$5
current_center_x=$((current_x + current_w / 2))
current_center_y=$((current_y + current_h / 2))

current_desktop=$(wmctrl -d | awk '/\*/ {print $1; exit}')

candidate_windows=$(wmctrl -lG | awk -v desktop="$current_desktop" -v exclude="$active_id" \
    '($2 == desktop || $2 == -1) && $1 != exclude {print $1, $3, $4, $5, $6}')

best_window=""
best_distance=999999
best_center_x=0
best_center_y=0

while IFS= read -r line; do
    [ -z "$line" ] && continue

    set -- $line
    win_id=$1 win_x=$2 win_y=$3 win_w=$4 win_h=$5

    win_class=$(xprop -id "$win_id" WM_CLASS 2>/dev/null | cut -d'"' -f2)
    case "$win_class" in
        *panel*|*Panel*|*desktop*|*Desktop*|*dock*|*Dock*|*bar*|*Bar*) continue ;;
    esac

    win_center_x=$((win_x + win_w / 2))
    win_center_y=$((win_y + win_h / 2))

    case "$direction" in
        up)
            [ $win_center_y -ge $current_center_y ] && continue
            v_dist=$((current_center_y - win_center_y))
            h_dist=$(abs_diff $win_center_x $current_center_x)
            distance=$((v_dist * 100 + h_dist))
            ;;
        down)
            [ $win_center_y -le $current_center_y ] && continue
            v_dist=$((win_center_y - current_center_y))
            h_dist=$(abs_diff $win_center_x $current_center_x)
            distance=$((v_dist * 100 + h_dist))
            ;;
        left)
            [ $win_center_x -ge $current_center_x ] && continue
            h_dist=$((current_center_x - win_center_x))
            v_dist=$(abs_diff $win_center_y $current_center_y)
            distance=$((h_dist * 100 + v_dist))
            ;;
        right)
            [ $win_center_x -le $current_center_x ] && continue
            h_dist=$((win_center_x - current_center_x))
            v_dist=$(abs_diff $win_center_y $current_center_y)
            distance=$((h_dist * 100 + v_dist))
            ;;
    esac

    if [ $distance -lt $best_distance ]; then
        best_distance=$distance
        best_window=$win_id
        best_center_x=$win_center_x
        best_center_y=$win_center_y
    fi
done <<< "$candidate_windows"

if [ -n "$best_window" ]; then
    wmctrl -ia "$best_window"
    xdotool mousemove "$best_center_x" "$best_center_y"
else
    echo "No window found in direction: $direction"
    exit 1
fi
