#!/bin/bash

# active window id
window_id=$(xdotool getactivewindow)

# check maximized
window_state=$(xprop -id "$window_id" | grep "_NET_WM_STATE")

# check maximization states
is_maximized_vert=false
is_maximized_horz=false

if echo "$window_state" | grep -q "_NET_WM_STATE_MAXIMIZED_VERT"; then
    is_maximized_vert=true
fi
if echo "$window_state" | grep -q "_NET_WM_STATE_MAXIMIZED_HORZ"; then
    is_maximized_horz=true
fi

# monitor info
monitors=$(xrandr --listmonitors | grep -v Monitors)
monitor_count=$(echo "$monitors" | wc -l)

# exit if only 1 monitor
if [ "$monitor_count" -eq 1 ]; then
    echo "Only one monitor detected. No action taken."
    exit 0
fi

# current window position
x=$(xwininfo -id "$window_id" | awk '/Absolute upper-left X:/ { print $4 }')
y=$(xwininfo -id "$window_id" | awk '/Absolute upper-left Y:/ { print $4 }')

# subtract offsets caused by panels / window decorations
x_offset=$(xwininfo -id "$window_id" | awk '/Relative upper-left X:/ { print $4 }')
y_offset=$(xwininfo -id "$window_id" | awk '/Relative upper-left Y:/ { print $4 }')
# TODO: + 2 ???
x=$((x - x_offset + 2))
y=$((y - y_offset))


# monitor widths & positions
monitor_info=$(xrandr --listmonitors | grep -v Monitors)
monitor_widths=()
monitor_positions=()

while IFS= read -r line; do
    monitor_width=$(echo "$line" | awk '{print $3}' | cut -d'x' -f1 | cut -d'/' -f1)
    monitor_position=$(echo "$line" | awk '{print $3}' | cut -d'+' -f2)
    monitor_widths+=("$monitor_width")
    monitor_positions+=("$monitor_position")
done <<< "$monitor_info"

# current monitor index
current_monitor_index=-1
for i in "${!monitor_positions[@]}"; do
    if [ "$x" -ge "${monitor_positions[$i]}" ] && [ "$x" -lt "$((monitor_positions[$i] + monitor_widths[$i]))" ]; then
        current_monitor_index=$i
        break
    fi
done

if [ "$current_monitor_index" -eq -1 ]; then
    current_monitor_index=0
fi

# next monitor index
next_monitor_index=$(( (current_monitor_index + 1) % monitor_count ))

# new (x, y) position for next monitor
new_x=$((monitor_positions[next_monitor_index] + x - monitor_positions[current_monitor_index]))
new_y=$y

# unmaximize if maximized
if [ "$is_maximized_vert" = true ]; then
    wmctrl -ir "$window_id" -b remove,maximized_vert
fi
if [ "$is_maximized_horz" = true ]; then
    wmctrl -ir "$window_id" -b remove,maximized_horz
fi

# move window
xdotool windowmove "$window_id" "$new_x" "$new_y"

# restore maximized
if [ "$is_maximized_vert" = true ]; then
    wmctrl -ir "$window_id" -b add,maximized_vert
fi
if [ "$is_maximized_horz" = true ]; then
    wmctrl -ir "$window_id" -b add,maximized_horz
fi
